class Solution {
public:
    int subarraysWithKDistinct(vector<int>& nums, int k) {
        return atMostK(nums, k) - atMostK(nums, k - 1);
    }
    
private:
    int atMostK(vector<int>& nums, int k) {
        int n = nums.size();
        int left = 0, right = 0, count = 0;
        unordered_map<int, int> mpp;

        while (right < n) {
            mpp[nums[right]]++;
            while (left <= right && mpp.size() > k) {
                mpp[nums[left]]--;
                if (mpp[nums[left]] == 0) mpp.erase(nums[left]);
                left++;
            }
            count += (right - left) + 1;
            right++;
        }
        return count;
    }
};
